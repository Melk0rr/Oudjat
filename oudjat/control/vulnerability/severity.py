"""A module that describes vulnerability severity."""

from enum import Enum


class Severity(Enum):
    """
    Severity enumeration.

    Each severity has a minimum and maximum CVSS value used to determine the severity of a CVE based on a CVSS score
    Each severity has a score (0-4) used to determine the severity of a CVE based on a score

    Exemple 1:
        severity = CVE.get_severity_by_cvss(7.5)
        print(severity) -> Severity.HIGH

    Exemple 2:
        severity = CVE.get_severity_by_score(4)
        print(severity) -> Severity.CRITICAL
    """

    INFO = {"min": 0, "max": 0, "score": 0}
    LOW = {"min": 0.1, "max": 3.9, "score": 1}
    MEDIUM = {"min": 4.0, "max": 6.9, "score": 2}
    HIGH = {"min": 7.0, "max": 8.9, "score": 3}
    CRITICAL = {"min": 9.0, "max": 10.0, "score": 4}

    @property
    def min(self) -> float:
        """
        Return a Severity minimum value.

        Returns:
            float: minimum value of the severity
        """

        return self._value_["min"]

    @property
    def max(self) -> float:
        """
        Return a Severity maximum value.

        Returns:
            float: maximum value of the severity
        """

        return self._value_["max"]

    @property
    def score(self) -> int:
        """
        Return a severity score.

        Returns:
            Callable: conformity level function to print value in a certain color
        """

        return self._value_["score"]

    @staticmethod
    def from_score(score: int = 0) -> "Severity":
        """
        Retrieve a severity based on its score.

        Args:
            score (int) : score to search

        Return:
            Severity : severity matching given score
        """
        if not 0 <= score <= 4:
            raise ValueError(
                f"{__class__.__name__}.from_score::{score} is not a valid Severity score (0 <= score <= 4)"
            )

        return Severity[Severity._member_names_[score]]

    @staticmethod
    def from_cvss(cvss: float = 0) -> "Severity":
        """
        Retrieve a severity based on a CVSS score.

        Args:
            cvss (float): the cvss score used to search in severity options

        Returns:
            Severity: the severity associated with the provided cvss score
        """

        if not 0 <= cvss <= 10:
            raise ValueError(
                f"{__class__.__name__}.from_cvss::{cvss} is not a valid CVSS score (0 <= score <= 10)"
            )

        def filter_sev(sev: "Severity") -> bool:
            return Severity.compare_cvss_severity(sev, cvss)

        return next(filter(filter_sev, Severity))

    @staticmethod
    def compare_cvss_severity(sev: "Severity", cvss: float) -> bool:
        """
        Check if the provided CVSS score is between given severity min and max values.

        Args:
            cvss (float)  : CVSS score that will be compared to the provided severity
            sev (Severity): severity which min and max value should wrap the cvss score

        Returns:
            bool: True if the given CVSS score is between the severity min and max values, False otherwise
        """

        return sev.min <= cvss <= sev.max
