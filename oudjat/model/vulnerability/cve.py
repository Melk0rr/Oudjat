import datetime
import re
from enum import Enum
from typing import Dict, List, Union

from oudjat.connectors.nist.nist_connector import NistConnector
from oudjat.utils.color_print import ColorPrint

from .definitions import CVE_REGEX

NIST_URL_BASE = "https://nvd.nist.gov/vuln/detail/"


class Severity(Enum):
    """
    Severity enumeration

    Each severity has a minimum and maximum CVSS value used to determine the severity of a CVE based on a CVSS score
    Each severity has a score (0-4) used to determine the severity of a CVE based on a score

    Exemple 1:
        severity = CVE.get_severity_by_cvss(7.5)
        print(severity) -> Severity.HIGH

    Exemple 2:
        severity = CVE.get_severity_by_score(4)
        print(severity) -> Severity.CRITICAL
    """

    INFO = {"min": 0, "max": 0, "score": 0}
    LOW = {"min": 0.1, "max": 3.9, "score": 1}
    MEDIUM = {"min": 4.0, "max": 6.9, "score": 2}
    HIGH = {"min": 7.0, "max": 8.9, "score": 3}
    CRITICAL = {"min": 9.0, "max": 10.0, "score": 4}

    @property
    def min(self) -> float:
        """
        Returns a Severity minimum value

        Returns:
            float: minimum value of the severity
        """

        return self._value_["min"]

    @property
    def max(self) -> float:
        """
        Returns a Severity maximum value

        Returns:
            float: maximum value of the severity
        """

        return self._value_["max"]

    @property
    def score(self) -> int:
        """
        Returns a severity score

        Returns:
            Callable: conformity level function to print value in a certain color
        """

        return self._value_["score"]

    @staticmethod
    def from_score(score: int = 0) -> "Severity":
        """
        Retrieves a severity based on its score

        Args:
            score (int) : score to search

        Return:
            Severity : severity matching given score
        """
        if not 0 <= score <= 4:
            raise ValueError(
                f"Severity.from_score::{score} is not a valid Severity score (0 <= score <= 4)"
            )

        return Severity[Severity._member_names_[score]]

    @staticmethod
    def from_cvss(cvss: float = 0) -> "Severity":
        """
        Retrieves a severity based on a CVSS score

        Args:
            cvss (float): the cvss score used to search in severity options

        Returns:
            Severity: the severity associated with the provided cvss score
        """

        if not 0 <= cvss <= 10:
            raise ValueError(
                f"Severity.from_cvss::{cvss} is not a valid CVSS score (0 <= score <= 10)"
            )

        def filter_sev(sev: "Severity") -> bool:
            return Severity.compare_cvss_severity(sev, cvss)

        return next(filter(filter_sev, Severity))

    @staticmethod
    def compare_cvss_severity(sev: "Severity", cvss: float) -> bool:
        """
        Checks if the provided CVSS score is between given severity min and max values

        Args:
            cvss (float)  : CVSS score that will be compared to the provided severity
            sev (Severity): severity which min and max value should wrap the cvss score

        Returns:
            bool: True if the given CVSS score is between the severity min and max values, False otherwise
        """

        return sev.min <= cvss <= sev.max


class CVE:
    """
    A class to handle vulnerabilities
    """

    # ****************************************************************
    # Attributes & Constructors

    NIST_ATTR = ["published", "lastModified", "vulnStatus", "descriptions", "metrics", "references"]

    def __init__(
        self,
        ref: str,
        cvss: float = 0,
        date: Union[str, datetime.datetime] = None,
        description: str = None,
    ) -> None:
        """
        Constructor

        Args:
            ref (str)             : CVE ref (CVE-YYYY-XXXXX)
            cvss (float)          : CVSS score of the CVE
            date (str | datetime) : publish date of the CVE
            description (str)     : CVE description
        """

        if not self.check_ref(ref):
            raise ValueError(f"{ref} is not a valid CVE id")

        self.ref = ref

        self.cvss = 0
        self.set_cvss(float(cvss))
        self.severity = Severity.INFO

        self.link = f"{NIST_URL_BASE}{self.ref}"

        self.status = None
        self.publish_date = date
        self.description = description
        self.references = []

        self.nist_connector = None

    # ****************************************************************
    # Getters and Setters

    def get_ref(self) -> str:
        """
        Getter for the CVE reference

        Return:
            str : CVE ref
        """

        return self.ref

    def get_cvss(self) -> float:
        """
        Getter for the CVSS score

        Return:
            float : CVE CVSS score
        """

        return self.cvss

    def get_severity(self) -> str:
        """
        Getter for the severity

        Return:
            str : CVE severity
        """

        return self.severity.name

    def get_link(self) -> str:
        """
        Getter for current CVE link

        Return:
            str : CVE link
        """

        return self.link

    def set_cvss(self, cvss_score: float) -> None:
        """
        Setter for the vulnerability CVSS score

        Args:
            cvss_score (float) : new CVSS score
        """

        if CVE.check_cvss(cvss_score):
            self.cvss = cvss_score
            self.resolve_severity()

        else:
            ColorPrint.red(
                f"{cvss_score} is not a valid CVSS score. You must provide a value between 0 and 10"
            )

    def set_from_dict(self, cve_dict: Dict) -> None:
        """
        Set CVE informations from dictionary

        Args:
            cve_dict (Dict) : cve dictionary
        """

        self.cvss = cve_dict.get("cvss")
        self.publish_date = cve_dict.get("publish_date", "")
        self.description = cve_dict.get("description", "")

    def init_nist_connector(self) -> None:
        """Initialize NIST connector"""

        if self.nist_connector is None:
            self.nist_connector = NistConnector()

    def copy(self, cve: "CVE") -> None:
        """
        Copy the given cve informations

        Args:
            cve (CVE) : cve to copy
        """

        self.set_from_dict(cve.to_dict(minimal=False))
        print(self)

    # ****************************************************************
    # Resolvers

    def resolve_severity(self) -> None:
        """
        Resolves the severity based on the CVSS score
        """

        self.severity = Severity.from_cvss(self.cvss)

    # ****************************************************************
    # Parsers

    def parse_nist(self, verbose: bool = False) -> None:
        """
        Function to parse NIST CVE page in order to retreive CVE data

        Args:
            verbose (bool) : enable verbose mode
        """

        self.init_nist_connector()
        nist_search = self.nist_connector.search(search_filter=self.ref, attributes=self.NIST_ATTR)

        nist_data = None
        if len(nist_search) == 0:
            return

        nist_data = nist_search[0]

        self.status = nist_data["vulnStatus"]
        self.publish_date = nist_data["published"]
        self.description = nist_data["descriptions"][0]["value"]

        metrics = nist_data["metrics"]

        if len(list(metrics)) > 0:
            metric_data = metrics[list(metrics)[0]][0]
            cvss_data = metric_data["cvssData"]

            self.set_cvss(cvss_data["baseScore"])

        self.references = [r["url"] for r in nist_data["references"]]

        if verbose:
            print(self)

    # ****************************************************************
    # Converters

    def __str__(self, show_severity: bool = False) -> str:
        """
        Converts the current instance to a string

        Args:
            show_severity (bool) : wheither to show the CVE severity

        Return:
            str : CVE string
        """

        base = f"{self.ref} ({self.cvss})"

        if show_severity:
            base += f"({self.severity.name})"

        return base

    def to_dict(self) -> Dict:
        """
        Converts the current instance to a dictionary

        Return:
            Dict: CVE converted to a dictionary
        """

        return {
            "cve": self.ref,
            "cvss": self.cvss,
            "published": self.publish_date,
            "status": self.status,
            "description": self.description,
            "link": self.link,
            "references": self.references,
        }

    # ****************************************************************
    # Static methods

    @staticmethod
    def check_ref(cve_ref: str) -> bool:
        """
        Checks whether the given cve id is valid

        Args:
            cve_ref (str) : CVE ref

        Return:
            bool : wheither the CVE ref is valid or not
        """
        return re.match(CVE_REGEX, cve_ref)

    @staticmethod
    def check_cvss(cvss_score: float) -> bool:
        """
        Checks whether the given cvss score is valid

        Args:
            cvss_score (float) : CVSS score

        Return:
            bool : wheither or not the CVSS score is valid
        """

        return 0 <= cvss_score <= 10

    @staticmethod
    def create_from_dict(cve_dict: Dict) -> "CVE":
        """
        Creates a CVE instance from a dictionary

        Args:
            cve_dict (Dict) : CVE dictionary

        Return:
            CVE : cve instance
        """

        return CVE(
            ref=cve_dict.get("ref"),
            cvss=cve_dict.get("cvss"),
            date=cve_dict.get("publish_date", ""),
            description=cve_dict.get("description", ""),
        )

    @staticmethod
    def find_cve_by_ref(ref: str, cve_list: List["CVE"]) -> "CVE":
        """
        Find a CVE instance by ref in a list of CVEs

        Args:
            ref (str)            : CVE ref
           aq cve_list (List[CVE]) : list of CVE to search in

        Return:
            CVE : cve instance based on provided ref
        """

        if not CVE.check_ref(ref):
            raise ValueError(f"CVE.find_cve_by_ref::Invalid CVE reference provided: {ref}")

        return next(filter(CVE.cve_ref_is, cve_list, [ref] * len(cve_list)))

    @staticmethod
    def cve_ref_is(cve: "CVE", value: str) -> bool:
        """
        Checks if the provided CVE ref is equal to the given value
        """

        return cve.get_ref() == value

    # TODO: implement SQLi database
    @staticmethod
    def resolve_cve_data(cves: List["CVE"], cve_data: List["CVE"] = None) -> None:
        """
        Resolves CVE data for all related CVE

        Args:
            cves (List[CVE])     : list of CVE instances to resolve information from Nist API
            cve_data (List[CVE]) : a list of CVE instances to use as information base
        """

        print(f"\nResolving {len(cves)} CVEs data...")

        for cve in cves:
            # Checks if the current CVE can be found in the provided cve list. If not : parse Nist page
            cve_imported = False
            if cve_data is not None:
                cve_search = CVE.find_cve_by_ref(ref=cve.get_ref(), cve_list=cve_data)

                if cve_search:
                    print(f"Found {cve.get_ref()} in CVE list ! Copying data...")
                    cve.copy(cve_search)
                    cve_imported = True

            if not cve_imported:
                cve.parse_nist(verbose=False)

    @staticmethod
    def max_cve(cves: List["CVE"]) -> List["CVE"]:
        """
        Returns the highest(s) cve(s)

        Args:
            cves (List[CVE]) : list of CVE to check

        Return:
            List[CVE] : sub list of the provided argument list with the highest CVSS score
        """

        if len(cves) == 0 or cves is None:
            print("No comparison possible: no CVE related")
            return None

        print(f"\nResolving most critical CVEs among {len(cves)} provided")

        max_cve = max(cves, key=lambda cve: cve.get_cvss())

        if max_cve is not None:
            max_cve = [cve for cve in cves if cve.get_cvss() == max_cve.get_cvss()]

        print("\nMax CVEs are:")
        for cve in max_cve:
            print(cve)

        return max_cve

